{"remainingRequest":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/eslint-loader/index.js??ref--4-1!/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/src/observer/resizeObserver.js","dependencies":[{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/src/observer/resizeObserver.js","mtime":1537966570663},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/cache-loader/dist/cjs.js","mtime":1537952498136},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/babel-loader/lib/index.js","mtime":1530808242000},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/cache-loader/dist/cjs.js","mtime":1537952498136},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport { attr } from '../constant.js'\n//! DOM绑定的事件模型\nlet attrModel = {}\nlet observer = null\n//! 存储callback模型\nlet observe = (element, callback) => {\n  //! 判断是否DOM\n  if (!(element instanceof Element)) {\n    throw new Error('param is not an Element')\n  }\n  //! 创建监听器\n  createObserver()\n  //! 判断该元素是否已经注册过\n  let domAttr = element.getAttribute(attr)\n  let callbacks = attrModel[domAttr]\n  //! 注册过\n  if (domAttr && callbacks && callbacks.length > 0) {\n    if (callbacks.indexOf(callback) < 0) {\n      observer.observe(element)\n      attrModel[domAttr].push(callback)\n    }\n  } else {\n    domAttr = Math.random().toString(16).slice(2)\n    element.setAttribute(attr, domAttr)\n    observer.observe(element)\n    //! 没有注册\n    attrModel[domAttr] = [callback]\n  }\n  //! 绑定之后返回数据\n  return {\n    //! 卸载当前绑定事件\n    unMonitor\n  }\n  //! 卸载当前绑定事件\n  function unMonitor () {\n    let domAttr = element.getAttribute(attr)\n    let callbacks = attrModel[domAttr]\n    if (domAttr && callbacks && callbacks.length > 0) {\n      element.removeAttribute(attr, )\n      let index = callbacks.indexOf(callback)\n      callbacks.splice(index, 1)\n    }\n  }\n}\n\n//! 创建observer\nfunction createObserver () {\n  if (observer) return false\n  observer = new ResizeObserver(entries => {\n    entries.forEach(entry => {\n      let { target, contentRect: { width = 0, height = 0 } = {} } = entry\n      let currentAttr = target && target.getAttribute && target.getAttribute(attr)\n      let callbacks = currentAttr && attrModel[currentAttr]\n      if (callbacks) {\n        callbacks.forEach(callback => {\n          let data = { width, height }\n          callback(data)\n        })\n      }\n    })\n  })\n}\n\nexport {\n  observe\n}\n",null]}