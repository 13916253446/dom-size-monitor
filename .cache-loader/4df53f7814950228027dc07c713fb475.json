{"remainingRequest":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/babel-loader/lib/index.js??ref--6-1!/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/cache-loader/dist/cjs.js!/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/eslint-loader/index.js??ref--4-1!/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/src/observer/resizeObserver.js","dependencies":[{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/src/observer/resizeObserver.js","mtime":1537966570663},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/.babelrc","mtime":1537960847410},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/cache-loader/dist/cjs.js","mtime":1537952498136},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/babel-loader/lib/index.js","mtime":1530808242000},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/cache-loader/dist/cjs.js","mtime":1537952498136},{"path":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport { attr } from '../constant.js';\n//! DOM绑定的事件模型\nlet attrModel = {};\nlet observer = null;\n//! 存储callback模型\nlet observe = (element, callback) => {\n  //! 判断是否DOM\n  if (!(element instanceof Element)) {\n    throw new Error('param is not an Element');\n  }\n  //! 创建监听器\n  createObserver();\n  //! 判断该元素是否已经注册过\n  let domAttr = element.getAttribute(attr);\n  let callbacks = attrModel[domAttr];\n  //! 注册过\n  if (domAttr && callbacks && callbacks.length > 0) {\n    if (callbacks.indexOf(callback) < 0) {\n      observer.observe(element);\n      attrModel[domAttr].push(callback);\n    }\n  } else {\n    domAttr = Math.random().toString(16).slice(2);\n    element.setAttribute(attr, domAttr);\n    observer.observe(element);\n    //! 没有注册\n    attrModel[domAttr] = [callback];\n  }\n  //! 绑定之后返回数据\n  return {\n    //! 卸载当前绑定事件\n    unMonitor\n    //! 卸载当前绑定事件\n  };function unMonitor() {\n    let domAttr = element.getAttribute(attr);\n    let callbacks = attrModel[domAttr];\n    if (domAttr && callbacks && callbacks.length > 0) {\n      element.removeAttribute(attr);\n      let index = callbacks.indexOf(callback);\n      callbacks.splice(index, 1);\n    }\n  }\n};\n\n//! 创建observer\nfunction createObserver() {\n  if (observer) return false;\n  observer = new ResizeObserver(entries => {\n    entries.forEach(entry => {\n      let { target, contentRect: { width = 0, height = 0 } = {} } = entry;\n      let currentAttr = target && target.getAttribute && target.getAttribute(attr);\n      let callbacks = currentAttr && attrModel[currentAttr];\n      if (callbacks) {\n        callbacks.forEach(callback => {\n          let data = { width, height };\n          callback(data);\n        });\n      }\n    });\n  });\n}\n\nexport { observe };",{"version":3,"sources":["src/observer/resizeObserver.js"],"names":["attr","attrModel","observer","observe","element","callback","Element","Error","createObserver","domAttr","getAttribute","callbacks","length","indexOf","push","Math","random","toString","slice","setAttribute","unMonitor","removeAttribute","index","splice","ResizeObserver","entries","forEach","entry","target","contentRect","width","height","currentAttr","data"],"mappings":";AACA,SAASA,IAAT,QAAqB,gBAArB;AACA;AACA,IAAIC,YAAY,EAAhB;AACA,IAAIC,WAAW,IAAf;AACA;AACA,IAAIC,UAAU,CAACC,OAAD,EAAUC,QAAV,KAAuB;AACnC;AACA,MAAI,EAAED,mBAAmBE,OAArB,CAAJ,EAAmC;AACjC,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD;AACD;AACAC;AACA;AACA,MAAIC,UAAUL,QAAQM,YAAR,CAAqBV,IAArB,CAAd;AACA,MAAIW,YAAYV,UAAUQ,OAAV,CAAhB;AACA;AACA,MAAIA,WAAWE,SAAX,IAAwBA,UAAUC,MAAV,GAAmB,CAA/C,EAAkD;AAChD,QAAID,UAAUE,OAAV,CAAkBR,QAAlB,IAA8B,CAAlC,EAAqC;AACnCH,eAASC,OAAT,CAAiBC,OAAjB;AACAH,gBAAUQ,OAAV,EAAmBK,IAAnB,CAAwBT,QAAxB;AACD;AACF,GALD,MAKO;AACLI,cAAUM,KAAKC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAV;AACAd,YAAQe,YAAR,CAAqBnB,IAArB,EAA2BS,OAA3B;AACAP,aAASC,OAAT,CAAiBC,OAAjB;AACA;AACAH,cAAUQ,OAAV,IAAqB,CAACJ,QAAD,CAArB;AACD;AACD;AACA,SAAO;AACL;AACAe;AAEF;AAJO,GAAP,CAKA,SAASA,SAAT,GAAsB;AACpB,QAAIX,UAAUL,QAAQM,YAAR,CAAqBV,IAArB,CAAd;AACA,QAAIW,YAAYV,UAAUQ,OAAV,CAAhB;AACA,QAAIA,WAAWE,SAAX,IAAwBA,UAAUC,MAAV,GAAmB,CAA/C,EAAkD;AAChDR,cAAQiB,eAAR,CAAwBrB,IAAxB;AACA,UAAIsB,QAAQX,UAAUE,OAAV,CAAkBR,QAAlB,CAAZ;AACAM,gBAAUY,MAAV,CAAiBD,KAAjB,EAAwB,CAAxB;AACD;AACF;AACF,CAtCD;;AAwCA;AACA,SAASd,cAAT,GAA2B;AACzB,MAAIN,QAAJ,EAAc,OAAO,KAAP;AACdA,aAAW,IAAIsB,cAAJ,CAAmBC,WAAW;AACvCA,YAAQC,OAAR,CAAgBC,SAAS;AACvB,UAAI,EAAEC,MAAF,EAAUC,aAAa,EAAEC,QAAQ,CAAV,EAAaC,SAAS,CAAtB,KAA4B,EAAnD,KAA0DJ,KAA9D;AACA,UAAIK,cAAcJ,UAAUA,OAAOlB,YAAjB,IAAiCkB,OAAOlB,YAAP,CAAoBV,IAApB,CAAnD;AACA,UAAIW,YAAYqB,eAAe/B,UAAU+B,WAAV,CAA/B;AACA,UAAIrB,SAAJ,EAAe;AACbA,kBAAUe,OAAV,CAAkBrB,YAAY;AAC5B,cAAI4B,OAAO,EAAEH,KAAF,EAASC,MAAT,EAAX;AACA1B,mBAAS4B,IAAT;AACD,SAHD;AAID;AACF,KAVD;AAWD,GAZU,CAAX;AAaD;;AAED,SACE9B,OADF","file":"resizeObserver.js","sourceRoot":"/Users/cuihaifeng/Documents/个人/github/dom-size-monitor","sourcesContent":["\nimport { attr } from '../constant.js'\n//! DOM绑定的事件模型\nlet attrModel = {}\nlet observer = null\n//! 存储callback模型\nlet observe = (element, callback) => {\n  //! 判断是否DOM\n  if (!(element instanceof Element)) {\n    throw new Error('param is not an Element')\n  }\n  //! 创建监听器\n  createObserver()\n  //! 判断该元素是否已经注册过\n  let domAttr = element.getAttribute(attr)\n  let callbacks = attrModel[domAttr]\n  //! 注册过\n  if (domAttr && callbacks && callbacks.length > 0) {\n    if (callbacks.indexOf(callback) < 0) {\n      observer.observe(element)\n      attrModel[domAttr].push(callback)\n    }\n  } else {\n    domAttr = Math.random().toString(16).slice(2)\n    element.setAttribute(attr, domAttr)\n    observer.observe(element)\n    //! 没有注册\n    attrModel[domAttr] = [callback]\n  }\n  //! 绑定之后返回数据\n  return {\n    //! 卸载当前绑定事件\n    unMonitor\n  }\n  //! 卸载当前绑定事件\n  function unMonitor () {\n    let domAttr = element.getAttribute(attr)\n    let callbacks = attrModel[domAttr]\n    if (domAttr && callbacks && callbacks.length > 0) {\n      element.removeAttribute(attr, )\n      let index = callbacks.indexOf(callback)\n      callbacks.splice(index, 1)\n    }\n  }\n}\n\n//! 创建observer\nfunction createObserver () {\n  if (observer) return false\n  observer = new ResizeObserver(entries => {\n    entries.forEach(entry => {\n      let { target, contentRect: { width = 0, height = 0 } = {} } = entry\n      let currentAttr = target && target.getAttribute && target.getAttribute(attr)\n      let callbacks = currentAttr && attrModel[currentAttr]\n      if (callbacks) {\n        callbacks.forEach(callback => {\n          let data = { width, height }\n          callback(data)\n        })\n      }\n    })\n  })\n}\n\nexport {\n  observe\n}\n"]}]}